Abstract (we'll do this last)

Background

Task + Corpus

This project was initiated as a submission to the ConLL 2013 Shared Task: Grammatical Error Correction \footnote{http://www.comp.nus.edu.sg/~nlp/conll13st.html}. As a result, all training and test data was from a provided corpus, the National University Singapore Corpus of Learner English, or NUCLE, and trained systems were scored with the provided NUS MaxMatch, or M^2 scorer. 

The corpus itself is comprised of ~1400 annotated essays written by english-second-language Singaporean students. The annotations provide an error type and correction, from the below types of errors:

\begin{tabular}{l | c | r}
	\hline
	tag & category \\
	\hline
	Vt & Verb tense \\
	Vm & Verb modal \\
	V0 & Missing verb \\ 
	Vform & Verb form \\
	SVA	& Subject-verb-agreement \\
 	ArtOrDet & Article or Determiner \\
	Nn & Noun number \\
	Npos & Noun possesive \\
	Pform & Pronoun form \\
	Pref & Pronoun reference \\
	Prep & Preposition \\
	Wci & Wrong collocation/idiom \\
	Wa & Acronyms \\
	Wform & Word form \\
	Wtone & Tone \\
	Srun & Runons, comma splice \\
	Smod & Dangling modifier \\
	Spar & Parallelism \\
	Sfrag & Fragment \\
	Ssub & Subordinate clause \\
	WOinc & Incorrect sentence form \\
	WOadv & Adverb/adjective position \\
	Trans & Link word/phrases \\
	Mec	& Punctuation, capitalization, spelling, typos \\
	Rloc & Local redundancy \\
	Cit	& Citation \\
	Others & Other errors \\
	Um & Unclear meaning (cannot be corrected) \\
	\hline
\end{tabular}

For the initial approach to this task, however, we looked to train a system that would identify a set of five errors: SVA, ArtOrDet, Nn, VForm, and Prep. The total corpus amounted to 67372 sentences, of which ~15,000 were noisy (references, urls, etc). Of that, 11288 sentences had annotations with those tags, leaving a fairly small dataset on which to train. After the time of this writing, ConLL has released an additional dataset - the blind test data with the gold references, so we anticipate that this dataset will grow significantly.

Baseline

Our baseline system used Moses to "translate" between a test corpus of original essays and the counterpart essays with all the annotations applied. This "flattened" corpus was split into ~58000 training sentences, ~2000 sentences for tuning, and ~8000 test sentences. 

Moses used Giza++ to align the sentences, with default heuristics and reordering models (grow-diag-final, msd-bidirectional-fe). The tuning used MERT with default features. 

To score the baseline, we use BLEU as well as the M^2 scorer. The M^2 scorer scores precision, accuracy, and F1 against the annotations, rather than the text itself. Though the conference version of M^2 is case-sensitive, we use a case-insensitive version for simplicity - recasing in English is a trivial task. Though both of these scorers support multi-reference evaluation, the corpus itself only has a single-reference gold reference file. Clearly, there are multiple equally fluent machine-generated correction candidates, even within the phrase table generated by the small training corpus, so we think this is an area that needs to be explored in terms of test corpus augmentation.

In reality, the optimality of a "correction" would be gauged by fluency and grammatical cohesion of the final generation, so neither Bleu nor M^2 adequately capture the ideal result - an ideal result would likely be modeled by a combination of the two, with multiple references. 

Issues with Baseline

Corpus Cleaning / Datasets

The first immediate issue with the baseline phrase table was that references and urls generated a large amount of noise in the correction data. Since we used the wordpunct NLTK tokenization scheme, urls in particular were inconsistently treated as multiple words, creating noisy alignments as well. Thus, the first cleaning step was to eliminate references completely, re-adding them after the correction. We accomplished this with a simple reegex substitution. 

Additionally, to experiment on the domain sensitivity of our system, we split the corpus by essay topic. This was particularly necessary because one of the challenges of the shared task was to submit system output for topics both inside and outside the training data. However, since the topics were not available a priori, we used an online version of the Latent Dirichlet Allocation (LDA) algorithm to generate a topic model, and then a K-Means clustering implementation to split the documents by those topics. We were then able to generate a "held out" dataset with 21572 training sentences (no references) with all but one topic, and 8695 test sentences (no references) with the remaining topic. This experiment showed that the NUCLE essay topics were largely similar in content, and that domain sensitivity is still a concern that ought to be tested by a heldout test set with a topic further removed from the training corpus.

To experiment with the impact of zero-annotation sentences in the training corpus, we also generated datasets without correct sentences. This left a dataset of 11288 sentences, of which we used 10000 to train and 288 to tune. 

To run stemming experiments, we used the stemmers bundled with NLTK. We stemmed and lemmatized the two corpora mentioned above with the Lancaster and Snowball stemmers and the WordNet lemmatizer to experiment with various degrees of stemming aggressiveness.

We used a Moses (SRILM) ngram language model trained on the test and dev datasets. Given the topic closeness between the test and train sets and the relatively small size of the test set, there was not a significant OOV problem, and experiments with big language models trained on the Brown Corpus did not yield any benefits to either of the scoring metrics. 

Approach

Sig Testing

Stemming

One of the issues with longer phrase choice, especially with verb and SVA errors, is that of sparsit. In general, these are context determined errors, so the ideal scenario would have a phrase table with a single source phrase translating to a target phrase, rather than multiple candidates that represent the different error type. 

Take, for example, the phrase "The dog had walked." With a verb or SVA error, this can be formulated as "The dog had walks", "The dog had walk", "The dog had walking," etc. However, there is only one valid annotation. In this case, it makes sense to reduce the word to its base form on the source side, because there will then be 4 training examples rather than one per type. In this trivial example, this also intuitively makes decoding less ambiguous, as reduction to base forms 

Though this could be achieved with segmentation as well (and that could be a different experiment), we decided that stemming was more likely to yield a consistent representation of this theory. We experimented with various levels of stemming aggressiveness (the WordNet lemmatizer on the low end, and the Lancaster stemmer on the high end), using our different training sets to measure the impact.

NoCorrect

The primary issue with the baseline system was the bias towards a correct \rightarrow correct translation in decoding. We tried to address this in various ways, but the naive way to do this was to train a system that dropped all sentences without annotations altogether, essentially forcing the SMT system to learn the annotation types with high probability. A variant of this system would experiment with various "factors" of correctness in the training data, where each 

We ran two experiments on this. The first was to test the performance on this system on a test set that only had sentences with annotations. The second was to test it on the full test set that we used for the other experiments. The former was to establish the hypothesis that decoding performance was dependent on a linear relationship between the number of "errors" in the training sets and the test sets, and the latter was to stay consistent with the methodology of the other experiments. In practice, this method is infeasible - without another model to recognize correctness, there is no way to decode "only sentences with errors" in a blind test, or production setting.

Results

Observations

Stemming

The results from the stemming experiments were a mixed bag, and probably suffered from the fact that it was a broad-stroke approach when a finer brush might have been preferable. Take, for example, the following phrase table entries for the Lancaster experiment:

\begin{framed}
wait $\|\|$ to wait $\|\|$ 0.333333 1 0.047619 0.00710397 2.718 $\|\|$ 0-1 $\|\|$ 3 21 1 \\
wait $\|\|$ wait $\|\|$ 1 1 0.428571 0.45 2.718 $\|\|$ 0-0 $\|\|$ 9 21 9 \\
wait $\|\|$ waiting $\|\|$ 1 1 0.52381 0.55 2.718 $\|\|$ 0-0 $\|\|$ 11 21 11
\end{framed}

\begin{framed}
' s fin $\|\|$ 's final $\|\|$ 1 0.25 0.0769231 0.15583 2.718 $\|\|$ 0-0 1-0 2-1 $\|\|$ 1 13 1 \\
' s fin $\|\|$ 's finances $\|\|$ 1 0.25 0.384615 0.0249327 2.718 $\|\|$ 0-0 1-0 2-1 $\|\|$ 5 13 5 \\
' s fin $\|\|$ 's financial $\|\|$ 1 0.25 0.538462
\end{framed}

These two phrase table entries are indicative of a few characteristic trends of the stemming experiments:
\begin{enumerate}
	\item The stemming had the intended effect on the verb entries in the phrase table, appropriately recognizing different verb forms with roughly equal probability. The first example shows the rather interesting characteristic that the verb "wait" is rarely corrected to the infinitive form, which, without stemming, would not have been found, as there would have been a single entry with "to wait" $\rightarrow$ "to wait" unless there was a specific annotation that added the infinitive.

 	\item The stemming had the opposite effect on nouns and adjectives, introducing ambiguity where there was previously none. In the second example, stemming to "fin" meant that there were three candidates for a single base form, where only one was really valid in the context of another sentence. 

	\item An additional insight was that tokenized punctuation can either be helpful or specifically unhelpful in the context of error correction. In the second example, the \{' s\} serves as potentially useful disambiguation - the following word can only be a noun, adjective, or adverb, since it is a possessive particle. However, parentheses, ellipses, and commas are unhelpful phrase boundaries, and should probably have been dropped altogether. Though we did not consider the punctuation error type for the initial tests, we anticipate that this would have been problematic had we done so.

end{enumerate}

Some of the additional noise introduced with stemming was fixed by being less aggressive (specifically the noise characteristic of the latter example), and in our tests, the WordNet lemmatizer performed best. In future tests (see sec. 10), we want to isolate error types in decoding sets to solidify the claim that stemming specifically increases recall and precision on Verb form and SVA errors, and does not help in the other cases - the alternative is that stemming merely introduces ambiguity in the same way downsampling does, and so it achieved slight gains just due to overcorrection.

Sig Testing

NoCorrect

Though not included in the above table, the test of our NoCorrect system only decoding sentences with errors had the most encouraging results, as shown below:

\begin{framed}
NoCorrect
BLEU = 88.26, 95.8/90.8/86.0/81.6
$M^2$ Precision: 0.4697
$M^2$ Recall   : 0.1951
$M^2$ F1       : 0.2757
\end{framed}

What this tells us is that at least for these 5 error forms, training a system on just errors is the best approach - it intuitively overcorrects in the same way that stemming or downsampling does artificially. The challenge then becomes twofold:
\begin{enumerate}
	\item Increase the size of the training set significantly - after dropping incorrect sentences and noise, the training set was only 10000 sentences.
	\item Drop sentences that are probably correct before decoding -- as the results show, the performance significantly drops with the full training set.
\end{enumerate}

Future Work

The results of this project were disappointing but not disheartening, and rather than concrete conlusions, we drew several insights that may lead to further research. These approaches fall into a few categories.

\subsection{Pre-Editing}

The NoCorrect model achieved fairly good results when decoding sentences with only errors, so one possible approach to error correction would be to train a model on incorrect sentences, and then use syntactic information to decide whether a sentence  "probably" needs a correction. This is analogous to "pre-editing" with rules, but to avoid the need for written rules, which would obviate the need for SMT, that information could be incorporated in a large language model~\cite{largelm} - high perplexity sentences would then be considered translation candidates.

\subsection{Corpus Augmentation}

One of the issues with even running meaningful experiments on the corpus was the lack of training data, and the small number of training examples of errors other than the 5 main types. However, none of the methods we used actually used the error types, and instead translated between flattened versions of the annotated corpora. This opens the door to augmenting the corpus - in tests, the closest documents stylistically to the NUCLE corpus were wikipedia articles in terms of level of grammar formality. One can use the topics generated from LDA topic analysis to generate a Wikipedia corpus, and then align it with a parallel foreign language corpus~\cite{wiki}. The foreign language corpus can then be translated to come up with a aligned, incorrect $\rightarrow$ correct parallel corpus. The additional advantage of this approach is that it may detect idiosyncratic language errors with careful selection of the parallel Wikipedia language.

\subsection{Tuning Modifications}

Much of the motivation for statistical significance pruning and downsampling was that the tuning process overweighted BLEU correctness, which meant that correct $\rightarrow$ correct translations were prioritized. This could partially be solved by minimizing losses against the $M^2$ metric in combination with BLEU, either as features or otherwise.

\subsection{Iterative Decoding}

One of the consistent themes in the project was that different error types benefit from different approaches. This leads to the conclusion that it may be beneficial to train multiple systems on different error types, and then iteratively decode in a logical chain to get better performance.

References

Daniel Dahlmeier and Hwee Tou Ng. 2012. Better Evaluation for Grammatical Error Correction. In Proceedings of the 2012 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies